클래스의 기본구조
클래스 : 값과 그 값을 사용하는 기능들을 묶어놓은 것

클래스 = 속성(고유의 특징값) + 함수 (기능의 구현)

EX)
fun main(){
	var a=Person("박보영",1990)
	var b=Person("전정국",1997)
	var c=Person("장원영",2004)
	
	a.introduce()
	b.introduce()
	c.introduce()
	
	}

class Person(var name:String, val birthYear:Int){
	fun introduce(){
	println("안녕하세요, ${birthYear}년생 ${name}입니다")
}


init 함수
인스턴스 생성시 구문을 수행하는 기능
패러미터나 반환형이 없는 특수한함수
생성자를 통해 인스턴스를 생성할때 호출되는 함수

보조 생성자
기본생성자와 다른형태의 생성자를 제공하여 인스턴스 생성시 편의를 제공하거나
추가적인 구문을 수행하는 기능을 제공하는 역할 

fun main(){
	var a=Person("박보영",1990)
	var b=Person("전정국",1997)
	var c=Person("장원영",2004)

	var d=Person("이루다")
	var e =Person("차은우")
	var f=Person("류수정")
	}

class Person(var name:String, val birthYear:Int){
	init {
	println("안녕하세요, ${this.birthYear}년생 ${this.name}입니다")
	}
	constructor(name:String) : this(name,1997)
	println("보조 생성자가 생성되었습니다.")
}


클래스의 상속

1. 서브 클래스는 수퍼 클래스에 존재하는 속성과 같은 이름의 속성을 가질 수 없음
2. 서브클래스가 생성될때는 반드시 수퍼클래스의 생성자까지 호출해야함

fun main(){
    var a =Animal("별이",5,"개")
    var b =Dog("별이",5)
    
    a.introduce()
    b.introduce()
    
    b.bark()
    
    var c= Cat("루이",1)
    
    c.introduce()
    c.meow()
}
open class Animal(var name:String, var age:Int, var type:String)
{
    fun introduce(){
       	println("저는 ${type} ${name}이고, ${age}살입니다.")
    }
}    
class Dog (name:String, age:Int) : Animal (name,age,"개")
{
    fun bark(){
        println("멍멍")
    }
}
class Cat (name:String, age:Int): Animal (name,age,"고양이")
{
    fun meow(){
        println("야옹야옹")
    }
}
	
