코틀린의 NULL 처리
null값을 가질 수 있다고 특별히 지정되지 않으면 null값 가질수 x

?처리
EX) public fun readLine() : String?
?는 해당 타입의 null 가능 버전을 나타냄. 즉 readLine 함수는 String 타입 or null값으로 반환함을 의미

null 이 될 수 있는 경우 처리방법(3가지)
1. 안전호출 연산자
2.non-null 단언 연산자
3.if문으로 null인지 검사

1. 안전호출 연산자 - 컴파일이나 런타임 에러 없이 '항상' 실행되도록 해야하는 경우
연산자( ?. ) 를 사용

let 함수 : 해당 타입의 값이 null 이 아닐 때 변수에 새로운 값을 지정하거나 다른 함수를 호출하는등의 추가작업 가능
ex)
fun main() {
    var beverage = readLine()?.let{
        if(it.isNotBlank()){
            it.capitalize()
        }else{
            "맥주"
        }
    }
    println(beverage)
}
readline 뒤에 ? 가 있으므로 beverage는 null 가능 타입으로 추론됌.
안전하게 let 함수를 호출한 결괏값이 beverage에 지정됌.
* readLine 함수의 반환값이 null이 아니면 let이 호출되며, 중괄호로 전달된 익명함수가 실행됌.

따라서 다음 실행 결과는 값을 아무것도 입력하지 않고 엔터 를 누르면 "맥주"가 출력됌.
원하는 영문자를 입력하고 엔터를 누르면 첫자가 대문자로 바뀌어 출력됌.

2.non-null 단언 연산자 - 이 연산자는 null이 될수없다고 단언하는 연산자
!! 를 사용
fun main(){
	var beverage = readLine()!!.capitalize()  // readLine 의 반환값이 무엇이든 capitalize를 실행하라

	println(beverage)
}

단언 연산자는 컴파일러가 null 발생을 미리 알 수 없는 상황이 생길 수 있을때 사용됌.

3. if문으로 null인지 검사
fun main(){
	var beverage=readLine()

	if(beverage != null){
		beverage=beverage.capitalize()
	}else{
		println("beverage가 null입니다.!")
	}
	println(beverage)
}

null 복합 연산자 : '?:' 를 사용하며 왼쪽의 피연산자 결과가 null이면 오른쪽의 피연선자를 실행하며, null이 아니면 왼쪽 피연산자 결과 반환

fun main(){
	var beverage = readLine()
	if(beverage!=null){
		beverage = beverage.capitalize()
	}else{
		println("beveage 가 null입니다.")
	}
	val beverageServed: String = beverage ?: "맥주"
	println(beverageServed)
}
beverage 값이 null 이 아니면 이 값을 beverageServed 에 지정 하며, null이면 기본값인 "맥주"가 지정됌